---
title: "05_expression_significance"
format: html
editor: visual
---

## The idea

The dataset at full contains 58.046 genes with their expression values for each of the 40 observations. To filter out the uninformative genes to the lesion/paralesion groups, a Student's t-Test could be performed on the scaled expressions. Genes with significant expression differences (p\<0.05) could be kept for further analysis.

```{r}
library(tidyverse)
library(broom)
```

```{r}
# load data
data <- read_tsv('../data/augmented_meta_gene_table.tsv')
```

```{r}
# lists of meta data columns and gene columns

meta_cols <- c('Sample',
               'Tissue_type',
               'Gender',
               'Race',
               'Smoker',
               'Age',
               'BMI')

gene_cols <- data |> 
  select(-one_of(meta_cols)) |> 
  colnames()
```

```{r}
# create linear models for each gene expression on Lesion/Perilesion groups
long_data_nested <- data |>
  mutate(Tissue_type = case_when(Tissue_type == "Lesion" ~ 1,
                                 Tissue_type == "Perilesion" ~ 0)) |> 
  pivot_longer(all_of(gene_cols),
               names_to = 'gene',
               values_to = 'scaled_expr') |> 
  group_by(gene) |> 
  nest() |> 
  mutate('model_object' = map(.x = data,
                   .f = ~lm(formula = scaled_expr ~ Tissue_type,
                            data = .x))) |> 
  mutate(model_object_tidy = map(.x = model_object,
                                ~tidy(.x,
                                       conf.int = TRUE,
                                       conf.level = 0.95)))
```

```{r}
# Unpack the models and adjust p-values for multiple comparisons
# significant gene epxpression difference when adjuste p-value > 0.05
model_estimates <- long_data_nested |> 
  unnest(model_object_tidy) |> 
  ungroup() |> 
  filter(term == 'Tissue_type') |> 
  select(c('gene','p.value','estimate','conf.low','conf.high')) |> 
  mutate('q.value' = p.adjust(p.value)) |> 
  mutate('is_significant' = case_when(q.value > 0.05 ~ 'no',
                                      .default = 'yes') ) |> 
  mutate('sign_gene_name' = case_when(is_significant == 'yes' ~ gene,
                                      .default = '')) |> 
  #filter(is_significant == 'yes') |> 
  arrange(estimate) |> 
  mutate(gene = factor(gene, levels = gene))
```

```{r}
model_estimates %>% 
  filter(is_significant == 'yes') %>% 
  dim()
```

```{r}
# save model estimates in a new file
write_tsv(model_estimates, file = '../data/gene_model_estimates.tsv')
```
