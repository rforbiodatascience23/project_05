---
title: "01_load"
format: html
editor: visual
---

## Loading data

We will use the package **janitor** (introduced in the R4DS2e book) in addition to the tidyverse as it will allow us to handle the duplicate names for the columns in the data)

```{r}
# output: FALSE
library(tidyverse)
library(janitor)
```

Loading the data from the **GSE151243** files available online on the [GEO Accession viewer](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE151243), we are using the base function `read.table` as the data comport several blank spaces within the same column (making it therefore impossible to use `read_table` ) one other way to use **dplyr** instead of **base** would be to use `read_fwf` and specifying the index for each columns (therefore a vector of size 47), we therefore find it easier for the reader to use the base function for the beginning of the loading part.

```{r}
# Loading the data
# We are not using the dplyr function read_table as it cannot handle the blank spaces inside some columns
path_gene = "../data/_raw/GSE151243_Raw_gene_counts_matrix.txt"
path_meta = "../data/_raw/GSE151243_series_matrix.txt"
gene_table <- read.table(path_gene, header = TRUE)
meta_table <- read.table(path_meta, skip = 33, fill = TRUE, header = TRUE)
```

At the end of the loading we want a dataframe which has already the desired shape, we choose to represent **each sample as a row** to match the definition of a tidy dataset, therefore the columns will be the different genes expressions (plus the metadata eventually)

```{r}
# output: FALSE
# Pivoting the table and renaming the columns
meta_colnames <- meta_table |>
  dplyr::select(-X.Sample_title) |>
  colnames()

meta_table <- meta_table |>
  t() |>
  as_data_frame() |>
  row_to_names(row_number = 1) |>
  clean_names() |>
  mutate(Sample = meta_colnames)
```

We have to clean the meta data as it is really dirty

```{r}
# Selecting and renaming the columns we are interested in
meta_table <- meta_table |>
  dplyr::select(
    Sample, 
    sample_characteristics_ch1,
    sample_characteristics_ch1_2,
    sample_characteristics_ch1_3,
    sample_characteristics_ch1_4,
    sample_characteristics_ch1_5,
    sample_characteristics_ch1_6,
    sample_characteristics_ch1_7,
    sample_characteristics_ch1_8
  ) |>
  dplyr::rename(dplyr::all_of(
    c(sample_characteristics_ch1 = "Tissue",
    sample_characteristics_ch1_2 = "Tissue_type",
    sample_characteristics_ch1_3 = "Patient_id",
    sample_characteristics_ch1_4 = "Age", 
    sample_characteristics_ch1_5 = "Gender",
    sample_characteristics_ch1_6 = "Race",
    sample_characteristics_ch1_7 = "Smoker",
    sample_characteristics_ch1_8 = "BMI"))
    )

```

```{r}
# Tidy columns (with no prefixes)
meta_table <- meta_table |>
  mutate(
    Tissue = gsub("tissue: ", "", Tissue),
    Tissue_type = gsub("tissue_type: ", "", Tissue_type),
    Patient_id = gsub("patient_id: ", "", Patient_id),
    Age = gsub("age: ", "", Age),
    Gender = gsub("gender: ", "", Gender),
    Race = gsub("race: ", "", Race),
    Smoker= gsub("smoker: ", "", Smoker),
    BMI= gsub("bmi: ", "", BMI),
    Sample = str_split_i(Sample, pattern="_", 2),
  )
```

```{r}
# Same operations we want genes as columns
gene_columns <- gene_table |>
  dplyr::select(-Sample) |>
  colnames()

gene_table <- gene_table |>
  t() |>
  as_data_frame() |>
  row_to_names(row_number = 1) |>
  mutate(Sample = gene_columns,
         across(starts_with("ENS"), ~as.numeric(.))
         )
  
```

```{r}
# We change the Sample id and put it as a column
gene_table <- gene_table |>
  mutate(
    Sample = str_split_i(Sample, pattern="_", 2)
  )
```

Here is the important operation of this first file, we are joining the two data frames (coming from gene data and meta data respectively) into a final dataframe where **each row is a sample with meta data and gene data**

```{r}
# We join on patient ID
final_table <- meta_table |>
  left_join(
    gene_table,
    by = "Sample"
  )
    
```

We save it as a gz file for memory and efficiency purposes

```{r}
# We save the corrected data frames at the end of this code
write_tsv(final_table, file = gzfile("../data/meta_gene_table.tsv.gz"))
```
