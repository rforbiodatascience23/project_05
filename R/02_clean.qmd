---
title: "02_dat_clean"
format: html
editor: visual
---

```{r}
# output: FALSE
library(tidyverse)
```

```{r}
# Loading the created dataset
meta_gene_table = read_tsv("../data/meta_gene_table.tsv")
```

```{r}
# Get the number of missing values
# SUPER LONG run time for this cell
missing_values <- meta_gene_table |>
  summarise(across(everything(), ~ sum(is.na(.))))
```

```{r}
# Checking if some columns have missing values
# Same result as above but super quick run time
missing_values_t <- missing_values |>
  t() |>
  as.data.frame()
colnames(missing_values_t) = c("Missing_values")
missing_values_t |>
  filter(Missing_values != 0)
```

```{r}
# Drop Columns 'Tissue' and 'Patient_id'
# Tissue: all rows are 'Skin', hence does not provide information
# Patient_id: The same information as 'Sample'

meta_gene_table <- meta_gene_table |> 
  select(!c('Tissue','Patient_id'))
```

```{r}
# Remove genes that have 0 expression for all patients (observed when analysing expression significance)

meta_cols <- c('Sample',
               'Tissue_type',
               'Gender',
               'Race',
               'Smoker',
               'Age',
               'BMI')
gene_cols <- meta_gene_table |> 
  select(-one_of(meta_cols)) |> 
  colnames()

# get genes names that have 0 expression
zero_expression_genes <- meta_gene_table |>
  pivot_longer(all_of(gene_cols)) |> 
  group_by(name) |> 
  summarise(sum = sum(value)) |> 
  filter(sum == 0) |> 
  ungroup() |> 
  pivot_wider(names_from = name, values_from = sum) |> 
  colnames()
```

```{r}
# select non 0 expression genes from the data
meta_gene_table <- meta_gene_table |> 
  select(-one_of(zero_expression_genes))
```

```{r}
gene_cols <- meta_gene_table |> 
  select(-one_of(meta_cols)) |> 
  colnames()
```

```{r}
# Subset genes that are 3-fold up or downregulated
gene_number_unfiltred <- 
  data |>
  filter(Sample == '1L') |> 
  select(starts_with('ENSG')) |> 
  ncol()

gene_expr_diff <- 
  data |>
  mutate(Sample = str_replace_all(Sample,'L',''), 
         Sample = str_replace_all(Sample,'N','')) |> 
  arrange(as.numeric(Sample)) |> 
  pivot_longer(all_of(gene_cols),
               names_to = 'gene',
               values_to = 'expr') |> 
  group_by(gene, Sample, Tissue_type) |>
  pivot_wider(names_from = Tissue_type, values_from = expr) |> 
  mutate(expr_diff = Lesion / Perilesion) |> 
  ungroup()
  
  
high_diff_strict <- 
  gene_expr_diff |> 
  group_by(gene) |> 
  filter(all(expr_diff >= 3) | all(expr_diff <= 1/3)) |>
  select(gene) |> 
  unique() |> 
  pull(gene)


high_diff_lose <- 
  gene_expr_diff |>
  group_by(gene) |> 
  filter(any(expr_diff >= 3) | any(expr_diff <= 1/3)) |>
  select(gene) |> 
  unique() |> 
  pull(gene) 

filtering_res <- 
  data.frame(unfiltered = gene_number_unfiltred, 
             filtered_strict = length(high_diff_strict), 
             filtered_loss = length(high_diff_lose))

filtering_res
```

```{r}
model_data <-  
  data |> 
  mutate(Tissue_type = ifelse(Tissue_type == "Lesion", 1, 0)) |>  
  select(Sample, Tissue_type, all_of(high_diff_lose)) |>  
  pivot_longer(-c(Sample, Tissue_type),
               names_to = 'gene', 
               values_to = 'expression') |> 
  group_by(gene) |> 
  nest() |> 
  mutate(model_object = map(data,
                   ~lm(formula = expression ~ Tissue_type, data = .x))) |>
  mutate(model_object_tidy = map(model_object,
                                ~tidy(.x, 
                                      conf.int = TRUE, 
                                      conf.level = 0.95)))
```

```{r}
# Unpack the models and adjust p-values for multiple comparisons
# significant gene epxpression difference when adjuste p-value > 0.05
model_estimates <- model_data |> 
  unnest(model_object_tidy) |> 
  ungroup() |> 
  filter(term == 'Tissue_type') |> 
  select(c('gene','p.value','estimate','conf.low','conf.high')) |> 
  mutate('q.value' = p.adjust(p.value)) |> 
  mutate('is_significant' = case_when(q.value > 0.01 ~ 'no',
                                      .default = 'yes') ) 
```

```{r}
sig_genes <- 
  model_estimates |> 
  filter(is_significant == 'yes') |> 
  pull(gene)

model_res <- 
  data.frame(after_filtering = length(high_diff_lose),
             after_model = length(sig_genes))

model_res
```

```{r}
sig_data <- 
  gene_expr_diff |> 
  filter(gene %in% sig_genes) 
```

```{r}
# We save the cleaned data frame
write_tsv(sig_data, 
          file = "../../data/cleaned_meta_gene_table.tsv")
```
