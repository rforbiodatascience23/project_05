---
title: "02_dat_clean"
format: html
editor: visual
---

```{r}
# output: FALSE
library(tidyverse)
library(broom)
```

```{r}
# Calculate the buffer size in bytes (19.7 MB) size of meta_gene_table
buffer_size_in_bytes <- 19.7 * 1048576

# Set the environment variable for vroom
Sys.setenv(VROOM_CONNECTION_SIZE = buffer_size_in_bytes)

# Loading the created dataset
meta_gene_table = read_tsv("../data/meta_gene_table.tsv.gz")
```

## Remove columns Tissue and Patient_id

Tissue and Patient_id are redundant columns, we therefore drop them.

```{r}
# Drop Columns 'Tissue' and 'Patient_id'
# Tissue: all rows are 'Skin', hence does not provide information
# Patient_id: The same information as 'Sample'

meta_gene_table <- meta_gene_table |> 
  dplyr::select(!c('Tissue','Patient_id'))
```

## Find columns containing missing values

**Save youself sometime:** the result of this time requiring analysis, is there are no columns containing missing values

Count the number of missing value in each columns.

```{r}
# Get the number of missing values
# SUPER LONG run time for this cell
missing_values <- meta_gene_table |>
  summarise(across(everything(), ~ sum(is.na(.))))
```

Find the names of columns that contained missing value.

```{r}
# Checking if some columns have missing values
# Same result as above but super quick run time
# Useless because you need to execute the cell above (not faster)
missing_values_t <- missing_values |>
  t() |>
  as.data.frame()

colnames(missing_values_t) = c("Missing_values")

missing_values_t |>
  filter(Missing_values != 0)
```

The result showed that no columns contained any missing values.

## Removes zero expression genes

Find all the gene names, that have zero expression across all samples

```{r}
# Remove genes that have 0 expression for all patients (observed when analysing expression significance)
gene_cols <- meta_gene_table |> 
  dplyr::select(starts_with('ENSG')) |> 
  colnames()

# get genes names that have 0 expression
zero_expression_genes <- meta_gene_table |>
  pivot_longer(all_of(gene_cols)) |> 
  group_by(name) |> 
  summarise(sum = sum(value)) |> 
  filter(sum == 0) |> 
  pull(name)

```

Remove genes with zero_expression all across

```{r}
# select non 0 expression genes from the data
meta_gene_table <- meta_gene_table |> 
  dplyr::select(-all_of(zero_expression_genes))
```

## Removes genes with non-significant change in expression level (p=0.05)

Find number of genes before removing genes with non-significant change in expression

```{r}
gene_cols <- meta_gene_table |> 
  dplyr::select(starts_with('ENSG')) |> 
  colnames()

before_model <- gene_cols |> 
  length()
```

Using linear model to model expression

```{r}
model_data <- meta_gene_table |> 
  mutate(Tissue_type = ifelse(Tissue_type == "Lesion", 1, 0)) |>  
  dplyr::select(Sample, Tissue_type, all_of(gene_cols)) |>  
  pivot_longer(-c(Sample, Tissue_type),
               names_to = 'gene', 
               values_to = 'expression'
               ) |> 
  group_by(gene) |> 
  nest() |> 
  mutate(model_object = map(
                  .x = data,
                  ~lm(formula = expression ~ Tissue_type, 
                  data = .x)
                  )
         ) |>
  mutate(model_object_tidy = map(model_object,
                                ~tidy(.x,
                                      conf.int = TRUE, 
                                      conf.level = 0.95))
         )
```

Create categorical variable that classifies genes with significant change in expression level. Genes with adj. p-val below 0.05 is categorized as significant.

```{r}
# Unpack the models and adjust p-values for multiple comparisons
# significant gene expression difference when adjusted p-value < 0.05
model_estimates <- model_data |> 
  unnest(model_object_tidy) |> 
  ungroup() |> 
  filter(term == 'Tissue_type') |> 
  dplyr::select(c('gene','p.value','estimate','conf.low','conf.high')) |> 
  mutate('q.value' = p.adjust(p.value)) |> 
  mutate('is_significant' = case_when(q.value > 0.05 ~ 'no',
                                      .default = 'yes') ) 
```

Find the name and number of genes with significant change in expression

```{r}
sig_genes <- model_estimates |> 
  filter(is_significant == 'yes') |> 
  pull(gene)

model_res <- data.frame(
               before_model = before_model,
               after_model = length(sig_genes))

model_res
```

Remove the non-significant genes

```{r}
meta_cols <- c('Sample',
               'Tissue_type',
               'Gender',
               'Race',
               'Smoker',
               'Age',
               'BMI')

sig_data <- meta_gene_table |>
  dplyr::select(all_of(meta_cols),
                all_of(sig_genes))
```

```{r}
model_estimates |>
  left_join(model_data, by=join_by(gene)) |>
  arrange(p.value) |>
  slice_head(n = 1000) |>
  ggplot(aes(x=gene, y=p.value, color=is_significant)) +
  geom_point()
  
```

```{r}
# save the full modeled data before significant gene selection
write_tsv(model_estimates, 
          file = gzfile("../data/gene_model_estimates.tsv.gz"))
```

We now subset gene with at least 3-fold change in expression. We used 2 filtering approaches:

-   **Strict** - where the gene must have 3-fold change across all samples.

-   **Loose** - the gene only need to have 3-fold change in at least 1 sample

We ended up using the loose approach, as no genes satisfied the strict approach

```{r}
gene_cols <- sig_data |> 
  dplyr::select(starts_with('ENSG')) |> 
  colnames()
```

```{r}
# Find gene count before filtering
gene_number_unfiltred <- length(gene_cols)

# Calculate the expression difference as expression level of Lesion/Perilesion
gene_expr_diff <- sig_data |>
  mutate(Sample = str_replace_all(Sample,'L',''), 
         Sample = str_replace_all(Sample,'N','')
         ) |> 
  arrange(as.numeric(Sample)) |> 
  pivot_longer(all_of(gene_cols),
               names_to = 'gene',
               values_to = 'expr'
               ) |> 
  group_by(gene, Sample, Tissue_type) |>
  pivot_wider(names_from = Tissue_type, 
              values_from = expr
              ) |> 
   # Add a little factor to avoid division with 0
  mutate(Perilesion = Perilesion + 1e-6, 
         expr_diff = (Lesion / Perilesion)) |> 
  ungroup()

# Using 2 filtering approaches
# Strict, the gene must have 3-fold change across all sample
# Loose, the gene needs to have 3-fold change in at least 1 sample

high_diff_strict <- gene_expr_diff |> 
  group_by(gene) |> 
  filter(all(expr_diff >= 3) | all(expr_diff <= 1/3))

high_diff_strict_gene <- high_diff_strict |> 
  distinct(gene) |> 
  pull(gene)

high_diff_lose <- gene_expr_diff |>
  group_by(gene) |> 
  filter(any(expr_diff >= 3) | any(expr_diff <= 1/3))

high_diff_lose_gene <- high_diff_lose |> 
  distinct(gene) |> 
  pull(gene)

filtering_res <- data.frame(
            unfiltered = gene_number_unfiltred, 
            filtered_strict = length(high_diff_strict_gene), 
            filtered_loss = length(high_diff_lose_gene)
            )

filtering_res
```

```{r}
# Applying filtering loss, and removing genes with less than 3-fold change in expression

filtered_sig_data <- gene_expr_diff |> 
  semi_join(high_diff_lose, by = 'gene') 
```

```{r}
# We save the cleaned and filtered data frame
write_tsv(filtered_sig_data, 
          file = gzfile("../data/cleaned_meta_gene_table.tsv.gz"))
```
